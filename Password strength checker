#!/bin/bash

# Set default values for the command line flags
min_length=8
num_special_chars=1
num_numbers=1
num_uppercase=1
num_lowercase=1
forbidden_passwords=()
generate=0

# Parse the command line flags
while [[ $# -gt 0 ]]; do
  case "$1" in
    -l|--min-length)
      min_length="$2"
      shift 2
      ;;
    -n|--num-special-chars)
      num_special_chars="$2"
      shift 2
      ;;
    -m|--num-numbers)
      num_numbers="$2"
      shift 2
      ;;
    -u|--num-uppercase)
      num_uppercase="$2"
      shift 2
      ;;
    -l|--num-lowercase)
      num_lowercase="$2"
      shift 2
      ;;
    -f|--forbidden-passwords)                                         forbidden_passwords=("$2")
      shift 2
      ;;
    -g|--generate)
      generate=1
      shift
      ;;
    *)
      echo "Invalid option: $1"
      exit 1                                                          ;;                                                          esac
done


# If the generate flag is set, generate a random password meeting the specified requirements
if [ $generate -eq 1 ]; then
  # Set the allowed characters for each type
  special_chars="!@#$%^&*()_+"
  numbers="0123456789"
  uppercase="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  lowercase="abcdefghijklmnopqrstuvwxyz"

  # Initialize the password to an empty string
  password=""

  # Add the required number of special characters to the password
  for (( i=0; i<num_special_chars; i++ )); do                       password+="${special_chars:$(($RANDOM % ${#special_chars})):1}"                                                               done

  # Add the required number of numbers to the password
  for (( i=0; i<num_numbers; i++ )); do
    password+="${numbers:$(($RANDOM % ${#numbers})):1}"
  done

  # Add the required number of uppercase letters to the password
  for (( i=0; i<num_uppercase; i++ )); do
    password+="${uppercase:$(($RANDOM % ${#uppercase})):1}"
  done

  # Add the required number of lowercase letters to the password
  for (( i=0; i<num_lowercase; i++ )); do
    password+="${lowercase:$(($RANDOM % ${#lowercase})):1}"

  done

  # Shuffle the password to increase randomness
  password="$(echo "$password" | fold -w1 | shuf | tr -d '\n')"

  # Check if the password meets the minimum length requirement
  while [ ${#password} -lt $min_

length ]; do
    # Add a random character to the password until it meets the minimum length requirement
    password+="${special_chars:$(($RANDOM % ${#special_chars})):1}"
    password+="${numbers:$(($RANDOM % ${#numbers})):1}"
    password+="${uppercase:$(($RANDOM % ${#uppercase})):1}"
    password+="${lowercase:$(($RANDOM % ${#lowercase})):1}"
  done

  # Print the generated password
  echo "Generated password: $password"
else
  # Prompt the user for a password
  read -s -p "Enter password: " password

  # Initialize some variables
  length=${#password}
  special_char_count=0
  numeric_count=0
  uppercase_count=0
  lowercase_count=0
  common_password=0

  # Check the length of the password
  if [ $length -lt $min_length ]; then
    echo "Password is too short (minimum $min_length characters)"
    exit 1
  fi

  # Check for forbidden passwords
  for forbidden_password in "${forbidden_passwords[@]}"; do
    if [ "$password" == "$forbidden_password" ]; then
      echo "Password is not allowed"
      exit 1
    fi
  done

  # Check for common passwords
  common_passwords=$(cat 10-million-password-list-top-100000.txt)
  for common_password in $common_passwords; do
    if [ "$password" == "$common_password" ]; then
      common_password=1
      break
    fi
  done

  # Check for the presence of special characters, numbers, uppercase and lowercase letters
  for (( i=0; i<$length; i++ )); do
    char=${password:$i:1}
    if [[ $char =~ [0-9] ]]; then
      ((numeric_count++))
    elif [[ $char =~ [A-Z] ]]; then
      ((uppercase_count++))
    elif [[ $char =~ [a-z] ]]; then
      ((lowercase_count++))
    elif [[ $char =~ [^A-Za-z0-9] ]]; then
      ((special_char_count++))
    fi
  done

  # Check if the password meets the requirements
  if [ $common_password -eq 1 ]; then
    echo "Password is very weak (common password)"
  elif [[ $numeric_count -ge $num_numbers ]] && [[ $uppercase_count -ge $num_uppercase ]] && [[ $lowercase_count -ge $num_lowercase ]] && [[ $special_char_count -ge $num_special_chars ]]; then
    echo "Password is strong"
  elif [[ $numeric_count -ge $num_numbers ]] && [[ $uppercase_count -ge $num_uppercase ]] && [[ $lowercase_count -ge $num_lowercase ]]; then
    echo "Password is moderate"

else
  echo "Password is weak"
fi
